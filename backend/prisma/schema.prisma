generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  username      String       @unique
  email         String?      @unique
  firstName     String
  lastName      String
  phoneNumber   String?
  password      String
  isActive      Boolean      @default(true)
  isVerified    Boolean      @default(false)
  role          Role         @default(USER)
  externalId    Int?         // ID del usuario en la BD externa
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  sessions      Session[]
  loginAttempts LoginAttempt[]
  permissions   UserPermission[]
  applications  UserApplication[]
  
  @@index([username])
  @@index([email])
  @@index([externalId])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  token        String   @unique @db.VarChar(1000)
  ipAddress    String?
  userAgent    String?  @db.Text
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

model LoginAttempt {
  id         String   @id @default(uuid())
  userId     String?
  username   String
  ipAddress  String?
  userAgent  String?  @db.Text
  success    Boolean
  reason     String?  @db.Text
  createdAt  DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([username])
  @@index([createdAt])
}

model Application {
  id          String   @id @default(uuid())
  name        String
  description String?
  url         String
  icon        String?
  isActive    Boolean  @default(true)
  category    String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users       UserApplication[]
  permissions Permission[]
  
  @@index([name])
}

model UserApplication {
  id            String   @id @default(uuid())
  userId        String
  applicationId String
  isFavorite    Boolean  @default(false)
  lastAccessed  DateTime?
  accessCount   Int      @default(0)
  createdAt     DateTime @default(now())
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, applicationId])
  @@index([userId])
  @@index([applicationId])
}

model Permission {
  id            String   @id @default(uuid())
  name          String
  code          String   @unique
  description   String?
  applicationId String?
  createdAt     DateTime @default(now())
  
  application Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  users       UserPermission[]
  
  @@index([code])
  @@index([applicationId])
}

model UserPermission {
  id           String   @id @default(uuid())
  userId       String
  permissionId String
  grantedBy    String?
  grantedAt    DateTime @default(now())
  expiresAt    DateTime?
  
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
} 